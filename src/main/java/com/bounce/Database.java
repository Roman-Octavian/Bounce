package com.bounce;

import java.sql.*;

/**
 * Responsible for the back-end connection.
 * The remote Heroku database is only truly queried twice:
 * 1. On application start-up to retrieve current stats
 * 2. On application termination via "Exit" button
 * This is so to prevent surpassing the limit of 3600 questions per hour imposed by ClearDB
 * Moreover, it takes two seconds to query the database, which freezes everything if ran on the main thread
 * That forces creating new threads for each database query, otherwise it would make the app stutter
 * Previous attempts at updating the database more frequently resulted in temporary unresponsiveness
 */
public class Database {
    private static Connection connection = null;
    private static PreparedStatement preparedStatement = null;

    /**
     * Establish connection to Heroku ClearDB remote database
     * @return the connection
     */
    public static Connection getConnection() {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://eu-cdbr-west-02.cleardb.net:3306/heroku_45b5e60a7be0064?reconnect=true",System.getProperty("USER"), System.getProperty("PASS"));
            return connection;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Close the connection to the remote database
     */
    public static void closeConnection() {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Add sphere session count to global sphere generation count
     * @param c connection to the database
     */
    public static void updateSphereCount(Connection c) {
        try {
            preparedStatement = c.prepareStatement("UPDATE heroku_45b5e60a7be0064.statistics SET sphere_count = sphere_count + ?;");
            preparedStatement.setInt(1, Bridge.getCanvasController().getSessionSphereCount());
            preparedStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Add sphere collision session count to global sphere-to-sphere collision count
     * @param c connection to the database
     */
    public static void updateSphereCollisionCount(Connection c) {
        try {
            preparedStatement = c.prepareStatement("UPDATE heroku_45b5e60a7be0064.statistics SET sphere_collision_count = sphere_collision_count + ?;");
            preparedStatement.setInt(1, Bridge.getCanvasController().getSphereCollisionCount());
            preparedStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Add wall collision session count to global sphere-to-wall collision count
     * @param c connection to the database
     */
    public static void updateWallCollisionCount(Connection c) {
        try {
            preparedStatement = c.prepareStatement("UPDATE heroku_45b5e60a7be0064.statistics SET wall_collision_count = wall_collision_count + ?;");
            preparedStatement.setInt(1, Bridge.getCanvasController().getWallCollisionCount());
            preparedStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Retrieve the amount of spheres generated by all users
     * @return integer stored in DB representing generated spheres
     */
    public static int retrieveSphereCount(Connection c) {
        try {
            preparedStatement = c.prepareStatement("SELECT sphere_count FROM statistics");
            ResultSet resultSet = preparedStatement.executeQuery();
            resultSet.next();
            return resultSet.getInt("sphere_count");
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
    }

    /**
     * Retrieve the amount of sphere to sphere collisions generated by all users
     * @return integer stored in DB representing collision amount
     */
    public static int retrieveSphereCollisionCount(Connection c) {
        try {
            preparedStatement = c.prepareStatement("SELECT sphere_collision_count FROM statistics");
            ResultSet resultSet = preparedStatement.executeQuery();
            resultSet.next();
            return resultSet.getInt("sphere_collision_count");
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
    }

    /**
     * Retrieve the amount of sphere to wall collisions generated by all users
     * @return integer stored in DB representing collision amount
     */
    public static int retrieveWallCollisionCount(Connection c) {
        try {
            preparedStatement = c.prepareStatement("SELECT wall_collision_count FROM statistics");
            ResultSet resultSet = preparedStatement.executeQuery();
            resultSet.next();
            return resultSet.getInt("wall_collision_count");
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
    }
}